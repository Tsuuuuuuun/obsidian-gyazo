/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GyazoPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  accessToken: ""
};
var GyazoPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("image", "Upload to Gyazo", async () => {
      await this.uploadToGyazo();
    });
    this.addCommand({
      id: "upload-to-gyazo",
      name: "Upload to Gyazo",
      editorCallback: async (editor, view) => {
        await this.uploadToGyazo();
      }
    });
    this.addSettingTab(new GyazoSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async uploadToGyazo() {
    if (!this.settings.accessToken) {
      new import_obsidian.Notice("Please set your Gyazo access token in the settings.");
      return;
    }
    try {
      const clipboardItems = await navigator.clipboard.read();
      const imageItem = clipboardItems.find((item) => item.types.includes("image/png") || item.types.includes("image/jpeg"));
      if (!imageItem) {
        new import_obsidian.Notice("No image found in clipboard.");
        return;
      }
      const imageBlob = await imageItem.getType("image/png");
      const imageBuffer = await imageBlob.arrayBuffer();
      const boundary = "----formdata-obsidian-" + Math.random().toString(36);
      const chunks = [];
      chunks.push(new TextEncoder().encode(`--${boundary}\r
`));
      chunks.push(new TextEncoder().encode('Content-Disposition: form-data; name="access_token"\r\n\r\n'));
      chunks.push(new TextEncoder().encode(`${this.settings.accessToken}\r
`));
      chunks.push(new TextEncoder().encode(`--${boundary}\r
`));
      chunks.push(new TextEncoder().encode('Content-Disposition: form-data; name="imagedata"; filename="image.png"\r\n'));
      chunks.push(new TextEncoder().encode("Content-Type: image/png\r\n\r\n"));
      chunks.push(new Uint8Array(imageBuffer));
      chunks.push(new TextEncoder().encode(`\r
--${boundary}--\r
`));
      const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);
      const body = new Uint8Array(totalLength);
      let offset = 0;
      for (const chunk of chunks) {
        body.set(chunk, offset);
        offset += chunk.length;
      }
      const response = await (0, import_obsidian.requestUrl)({
        url: "https://upload.gyazo.com/api/upload",
        method: "POST",
        body: body.buffer,
        headers: {
          "Content-Type": `multipart/form-data; boundary=${boundary}`
        }
      });
      const data = response.json;
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        const editor = activeView.editor;
        const markdown = `![${data.image_id}](${data.url})`;
        editor.replaceSelection(markdown);
        new import_obsidian.Notice("Image uploaded successfully!");
      }
    } catch (error) {
      new import_obsidian.Notice("Failed to upload image: " + error.message);
    }
  }
};
var GyazoSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Gyazo access token").setDesc("Enter your Gyazo access token").addText((text) => text.setPlaceholder("Enter your access token").setValue(this.plugin.settings.accessToken).onChange(async (value) => {
      this.plugin.settings.accessToken = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
